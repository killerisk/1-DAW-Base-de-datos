Selección de campos:
1. Escribir una consulta para ver el nombre de todos los clientes.

	SELECT nombre FROM clientes;

2. Realizar una consulta que muestre el nombre y número asignado a cada uno de los clientes disponibles en la base de datos.

	SELECT nombre,numclie FROM clientes;

3. Mostrar para todos los empleados su nombre, puesto y edad.

	SELECT nombre,puesto, edad FROM empleados;

4. Realizar un informe de la edad, nombre y puesto de todos los empleados.

	SELECT edad,nombre,puesto FROM empleados;

5. Para las oficinas mostrar su número identificador, ciudad y región.

	SELECT oficina,ciudad,region FROM oficinas;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Renombrado de campos:
6. Igual que el ejercicio anterior, pero en lugar de utilizar como nombre del campo ciudad utilizaremos Localidad.
	
	SELECT oficina,ciudad AS "Localidad" FROM oficinas;

7. Mostrar todos los clientes y su límite de crédito. Como nombre de la cabecera deberá aparecer “Nombre del cliente” y “Crédito máximo”.

	SELECT nombre AS 'Nombre del Cliente' ,limitecredito AS 'Credito Maximo' FROM clientes;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Seleccionar todos los campos:
8. Mostrar todos los datos de la tabla Clientes.

	SELECT * FROM clientes;

9. Mostrar todos los datos de la tabla Empleados.

	SELECT * FROM empleados;( TODOS LOS CAMPOS DE EMPLEADO )

10. Mostrar todos los datos de la tabla Oficinas. 

	SELECT * FROM oficinas;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ordenación de consultas:
11. Obtener la lista de clientes ordenados por su nombre. Visualizar todas las columnas de la tabla.

	SELECT * FROM clientes ORDER BY nombre ASC;

	SELECT * FROM clientes ORDER BY nombre DESC;

12. Obtener las oficinas ordenadas por región y dentro de cada región por ciudad, si hay más de una oficina en la misma ciudad, aparecerá primero la que tenga el número de oficina mayor.

	SELECT region,ciudad,oficina 
	FROM oficinas 
	ORDER BY region ASC, ciudad ASC, oficina DESC;
	
	SELECT region,ciudad,oficina 
	FROM oficinas 
	ORDER BY region, ciudad, oficina; (POR DEFECTO TE ORDENA DE MENOR A MAYOR)

13. Obtener los pedidos ordenados por la fecha en la que se realizaron.

	SELECT * FROM pedidos 
	ORDER BY fechapedido ASC;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Limitación del número de resgistros:
14. Listar los cuatro pedido más caros (con un importe mayor).
	
	SELECT * 
	FROM pedidos 
	ORDER BY importe DESC LIMIT 4;

15. Obtener el número del cliente que hizo el primer pedido.
	
	SELECT clie 
	FROM pedidos 
	ORDER BY fechapedido LIMIT 1;

16. Obtener el nombre del empleado de menor edad.

	SELECT nombre 
	FROM empleados 
	ORDER BY edad LIMIT 1;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Operadores aritméticos:
17. Siempre he tenido la duda de saber cuanto es siete más tres.

	SELECT 7 + 3 ;	

18. Mostrar del empleado más joven, su edad actual y la edad que tendrá el año que viene.

	SELECT edad, edad+20 AS 'Edad en 20 años' 
	FROM empleados 
	ORDER BY edad ASC LIMIT 1;

19. Mostrar los clientes, suponiendo que aumentamos su límite de crédito en 500 euros.

	SELECT limitecredito, limitecredito + 500 AS 'limite de credito aumentado' 
	FROM clientes;

20. Obtener la lista de todos los productos, indicando para cada uno: idfab, idproducto, descripción, precio y precio con I.V.A. incluido (es el precio anterior aumentado en un 21%).

	SELECT idfab,idproducto,descripcion, precio, precio * 1.21 AS 'Precio con IVA'  
	FROM productos;

21. De cada pedido queremos saber su número, la fecha en la que se realizó, cantidad pedida, el precio unitario de cada producto y el importe total.

	SELECT numpedido,fechapedido,cant,importe, importe/cant AS 'Precio unitario' 
	FROM pedidos;

22. Obtener el número de pedido, fab, producto, cantidad, precio unitario e importe pero mostrando únicamente las 3 líneas de pedido de menor precio unitario.
	
	SELECT numpedido,fab, producto,cant,importe AS 'Precio total', importe/cant AS 'Precio unitario' 
	FROM pedidos 
	ORDER BY importe/cant LIMIT 3;

	SELECT numpedido,fab, producto,cant,importe AS 'Precio total', importe/cant AS 'Precio unitario' 
	FROM pedidos ORDER BY 6 LIMIT 3; 
	(ORDENAR POR 6 ES QUE IMPORTE/CANTIDAD OCUPA LA POSICION 6 EN LOS ATRIBUTOS)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Funciones de fecha:
23. ¿Cuál es la fecha de hoy?

	SELECT current_date();

24. Mostrar el més actual.

	SELECT month(current_date());

	SELECT monthname(current_date());

25. ¿Qué día de la semana es hoy?	

	SELECT dayofmonth(current_day());
	
	SELECT dayname(current_date());

26. Si tienes 25 años, ¿en qué año naciste?

	SELECT year(current_date()) - 25  AS 'Fecha de nacimiento';

27. Y si naciste en el año 2000, ¿cuántos años tienes?

	SELECT year(current_date()) - 2000 AS 'Edad';

28. Para todos los pedidos, mostrar el número de pedido, el importe, el día de la semana y el mes en el que se realizó.

	SELECT numpedido,importe, dayname((fechapedido)) AS 'Dia de la semana', monthname(fechapedido) AS 'Mes' FROM pedidos;

29. Listar de cada empleado su nombre, nº de días que lleva trabajando en la empresa y su año de nacimiento (suponiendo que este año ya ha cumplido años).

	SELECT nombre,datediff(current_date(), date(contrato)) AS 'Dias trabajados', year(current_date())-edad AS 'Año de nacimiento' FROM empleados;

30. Para cada pedido mostrar sus datos y el número de días transcurrido desde que se realizó hasta hoy.

	SELECT *, datediff(current_date(),fechapedido) AS 'Numero de dias' FROM pedidos;

31. Obtener la fecha actual, en formato “(<nombre_día>) <día> de <nombre_mes> del año <año>”. Un ejemplo: (jueves) 7 de septiembre del año 2017

	SELECT date_format(current_date(), "(%W) %d de %M del año %Y");

32. Mostrar la información de todos los pedidos junto a la fecha en la que se realizaron, con el formato del ejercicio anterior.

	SELECT *, date_format(fechapedido, "(%W) %e de %M del año %Y") AS 'Fecha pedido con formato' FROM pedidos;

33. Obtener la hora actual con el formato “Las <hora> horas y <minutos> minutos”. Un ejemplo: Las 10 horas y 54 minutos	

	SELECT date_format(now(), "Las %H horas y %i minutos");

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Funciones de cadena:
34. ¿Cuál es la longitud de tu nombre?

	SELECT char_length("Maria");

	SELECT nombre, char_length(nombre) AS 'Longitud del nombre' from Empleados;

35. Mostrar los primeros diez caracteres a la derecha de la frase: “Mi perro se llama Perico Pérez”.

	SELECT substring("Mi perro se llama Perico Pérez",1,10) AS 'Cadena cortada';
	SELECT right("Mi perro se llama Perico Pérez",10) AS 'Cadena cortada';

36. Para cada empleado mostrar su nombre, número de empleado y su puesto de la forma: “Trabaja de ...” añadiendo el puesto correspondiente. El nombre de la última
    columna debe ser “Categoría”.

	SELECT nombre, numemp,concat('Trabaja de ' ,puesto) AS 'Tipo de trabajo' 
	from Empleados;

37. Igual que el ejercicio anterior pero cambiando el puesto de “Representante” por el de “Comercial”.

	SELECT nombre, numemp,concat('Trabaja de ' ,replace(puesto, "Representante", "Comercial")) AS 'Tipo de trabajo' 
	from Empleados;

38. Para cada producto obtener sus datos. Por no hacer muy largo el informe mostrar de la descripción solo los primeros 8 caracteres.

	Select idfab,idproducto, substring(descripcion,1,8),precio, existencias 
	from productos;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Condicionales:
39. Mostrar los empleados cuya edad sea igual a 29 años;

	SELECT * 
	FROM empleados 
	WHERE edad=29;

40. Listar toda la información de los pedidos de enero.

	SElECT * 
	from pedidos 
	WHERE monthname(fechapedido) = 'January';

41. Listar toda la información de los pedidos con un mes distinto a enero.
	
	SElECT * 
	from pedidos 
	WHERE monthname(fechapedido) != 'January';

	SElECT * 
	from pedidos 
	WHERE monthname(fechapedido) <> 'January';

42. Listar los números de los empleados que tienen una oficina asignada.

	SELECT numemp 
	FROM empleados 
	WHERE oficina >0;

	SELECT numemp 
	FROM empleados 
	WHERE oficina is not null;

43. Listar los números de los empleados que no tienen una oficina asignada y tienen más de 30 años.

	SELECT numemp 	
	FROM empleados 
	WHERE edad>30 && oficina is null;

44. Listar los números de las oficinas que no tienen director.

	SELECT oficina 
	FROM oficinas 
	WHERE dir is null;

45. Listar los datos de las oficinas de las regiones del norte y del este (tienen que aparecer primero las del norte y después las del este).
	
	SELECT * 
	FROM oficinas 
	WHERE region = "este" || region = "norte" 
	order by region desc;

	SELECT * 	
	FROM oficinas 
	WHERE region IN("este","norte") 
	order by region desc;

46. Listar los empleados cuyo nombre contengan una ‘r’.

	SELECT * 
	FROM empleados 
	WHERE nombre like "%r%";

	SELECT * 
	FROM empleados 
	WHERE nombre not like "%r%";   -----> EMPLEADOS QUE NO TIENEN UNA R

47. Mostrar los empleados cuyo apellido o segundo nombre comiencen por una ‘V’.

	SELECT * 
	FROM empleados 
	WHERE nombre like "% V%";

48. Listar los productos cuyo idproducto acabe en ‘x’.

	SELECT * 
	FROM productos 
	WHERE idproducto like "%x";

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

EXPLICACION DEL IN:

SELECT *
FROM empleados 
WHERE oficina IN (11,12,23,24);

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Consultas multitablas:
49. Mostrar la información de los empleados junto a la información de las oficinas en las que trabajan.

	SELECT * FROM empleados 
	JOIN oficinas On empleados.oficina = Oficinas.oficina;

50. Igual que el ejercicio anterior, pero mostrando solo los empleados que trabajan en las oficinas del sur.

	SELECT * FROM empleados 

	JOIN oficinas On empleados.oficina = Oficinas.oficina 
	
WHERE region="sur";

51. Igual que el ejercicio anterior, ordenando los empleados por edad.

	SELECT * FROM empleados 
	
JOIN oficinas On empleados.oficina = Oficinas.oficina 

	WHERE region="sur"
 ORDER BY edad;

52. Escribir una consulta que muestre la información de todos los empleados junto a los datos de su oficina.

	SELECT * FROM empleados 
	JOIN oficinas On empleados.oficina = Oficinas.oficina;

53. Escribir una consulta que muestre la información de todos los empleados (trabajen o no en una oficina) junto a la información de su oficina.

	SELECT * FROM empleados 
	LEFT JOIN oficinas On empleados.oficina = Oficinas.oficina;

54. Listar las oficinas del este indicando para cada una de ellas su número, ciudad, números y nombres de sus empleados. Hacer una versión en la que aparecen sólo las que tienen empleados, y hacer otra en las que además aparezcan las oficinas del este que no tienen empleados.

	SELECT OFICINAS.oficina, OFICINAS.ciudad,EMPLEADOS.numemp,EMPLEADOS.nombre 
	FROM oficinas 

	JOIN empleados on Oficinas.oficina = Empleados.oficina 
	where region="este";

55. Listar los pedidos mostrando su número de pedido e importe, junto a la información del cliente (nombre y límite de crédito) que realiza el pedido.

	SELECT numpedido,importe,nombre,limitecredito 
	FROM pedidos JOIN clientes On pedidos.clie = clientes.numclie ;

	SELECT numpedido,importe,nombre,limitecredito 
	FROM pedidos AS p 
	JOIN clientes AS C On p.clie = c.numclie ;

56. Igual que el ejercicio anterior mostrando además la información del empleado que fue responsable de este pedido.

	SELECT numpedido,importe,CLIENTES.nombre, limitecredito,EMPLEADOS.* 
	FROM pedidos 
JOIN clientes On pedidos.clie = clientes.numclie 

	JOIN EMPLEADOS On pedidos.resp = EMPLEADOS.NUMEMP;

57. Listar los datos de cada uno de los empleados, la ciudad y región en donde trabaja.

	SELECT empleados.*,ciudad,region 
	FROM empleados 
	left JOIN Oficinas on empleados.oficina = oficinas.oficina;

58. Listar todas las oficinas con objetivo superior a 60.000 euros indicando para cada una de ellas el nombre de su director.

	SELECT OFICINAS.*, EMPLEADOS.nombre 
	FROM oficinas left 
	JOIN empleados on oficinas.dir=empleados.numemp 
	where objetivo>60000;

59. Listar los pedidos superiores a 2.500 euros, incluyendo el nombre del empleado responsable del pedido y el nombre del cliente que lo solicitó. Ordenar la consulta por el nombre del cliente.

	SELECT numpedido,importe,empleados.nombre,clientes.nombre 
	FROM pedidos 
join empleados on pedidos.resp=empleados.numemp 

	join clientes on pedidos.clie=clientes.numclie
	
where importe>2500
	
order by clientes.nombre;

60. Listar ordenados por el nombre los empleados que han realizado algún pedido.

	SELECT distinct nombre

	FROM EMPLEADOS 
	
JOIN PEDIDOS ON EMPLEADOS.NUMEMP=PEDIDOS.RESP 

	ORDER BY EMPLEADOS.NOMBRE;

61. Hallar los empleados que realizaron su primer pedido el mismo día que fueron contratados.

	SELECT distinct nombre

	FROM EMPLEADOS 
	
JOIN PEDIDOS ON EMPLEADOS.NUMEMP=PEDIDOS.RESP 
	
where EMPLEADOS.contrato = PEDIDOS.fechapedido ;

62. Listar los empleados con una cuota superior a la de su jefe; para cada empleado sacar sus datos y el número, nombre y cuota de su jefe.
	
	SELECT EMPLEADOS.* , JEFE.numemp , JEFE.nombre, JEFE.cuota

	FROM EMPLEADOS 

	JOIN EMPLEADOS AS JEFE ON EMPLEADOS.jefe = JEFE.numemp
	
WHERE EMPLEADOS.cuota > JEFE.cuota;
	
63. Listar los números de los empleados que son responsables de un pedido superior a 1.000 euros o que tengan una cuota inferior a 5.000 euros.
	
	SELECT EMPLEADOS.numemp

	FROM EMPLEADOS

	JOIN PEDIDOS ON PEDIDOS.resp = EMPLEADOS.numemp
	
WHERE PEDIDOS.IMPORTE>1000 OR EMPLEADOS.cuota <5000;

	SELECT NUMEMP
	
FROM EMPLEADOS
	
WHERE CUOTA<5000

	UNION
	
SELECT RES
	P
FROM PEDIDOS
	
WHERE IMPORTE>1000;

64. Mostrar las oficinas que no tienen director o que se encuentran en la región sur.
	
	SELECT * 

	FROM oficinas
	
WHERE dir is null OR region = "sur";
	
	SELECT * 

	FROM oficinas
	
WHERE dir is null 
	
UNION

	SELECT *
	
FROM oficinas
	
WHERE region = "sur";

65. Listar las oficinas que no tienen director o en las que trabaja alguien.

	SELECT OFICINA

	FROM OFICINAS
	
WHERE dir IS NULL

	UNION 
	
SELECT oficina

	FROM EMPLEADOS
;

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Consultas de agregados
66. ¿Cuál es la cuota media y las ventas medias de todos los empleados?
	
	SELECT avg(cuota) AS "Media cuota",

	avg(ventas) AS "Media ventas"
	
FROM EMPLEADOS
	
67. Edad media de los empleados.
	
	SELECT avg(edad) AS "Media edad"
	FROM empleados;
	
68. Edad del empleado más joven y del mayor.

	SELECT min(edad) AS 'Edad Minima',
	
max(edad) AS 'Edad maxima'

	FROM empleados;

69. Hallar el importe medio de pedidos, el importe total de pedidos y el precio medio de venta (el precio de venta es el precio unitario en cada pedido).

	SELECT avg(importe) AS 'Importe medio',

	sum(importe) AS 'Importe total', 
	
avg(importe/cant) AS 'Media precio unitario'
	
FROM pedidos;

70. Hallar el precio medio de los productos del fabricante ‘ACI’.	

	SELECT avg(precio) AS 'Precio medio' 
	
FROM productos 
	
WHERE idfab="ACI";

71. ¿Cuál es el importe total de los pedidos realizados por el empleado Vicente Vino?

	SELECT sum(importe) 
	
FROM empleados
	
JOIN empleados on PEDIDOS.RESP=EMPLEADOS.NUMEMP 

	WHERE nombre='vicente vino';
	
	SELECT sum(importe) 
	
	
FROM empleados
	

	JOIN pedidos on PEDIDOS.RESP=EMPLEADOS.NUMEMP 

	
	WHERE nombre='vicente vino';

72. Hallar en qué fecha se realizó el primer pedido.

	SELECT min(fechapedido) AS 'Primer pedido' 
	from pedidos;

	SELECT * 
	from pedidos 

	order by fechapedido
	
limit 1;
	
	SELECT fechapedido 
	
from pedidos 

	order by 1
	
limit 1;

73. Hallar cuántos pedidos hay de más de 5.000 euros.

	SELECT count(numpedido) AS 'Numero de pedidos' 
	
from pedidos 
	
where importe>5000;
	
	SELECT count(*) AS 'Numero de pedidos' 
	
from pedidos 
	
where importe>5000;

74. Listar cuántos empleados están asignados a cada oficina, indicar el número de oficina.

	SELECT oficina, count(oficina) AS 'Numero de oficinas'

	from empleados
	
group by oficina;

75. Para cada empleado, obtener su número, nombre, e importe vendido a cada cliente indicando el número de cliente.

	select numemp,nombre, sum(PEDIDOS.importe) AS 'Importe vendido a cada cliente', clie

	from empleados 
	
join pedidos on pedidos.resp = empleados.numemp
	
group by numemp,clie;
	
76. Para cada empleado cuyos pedidos suman más de 3.000 euros, hallar su importe medio de pedidos. 
En el resultado indicar el número de empleado y su importe medio de pedidos.

	select resp AS 'Numero de empleado', 

	count(resp) AS 'Numero de pedidos',
	
avg(importe) AS 'Media de los pedidos' 
	
FROM pedidos
	
GROUP by resp

	HAVING sum(importe)>3000;

77. Listar de cada producto, su descripción, precio y cantidad total pedida, 
incluyendo sólo los productos cuya cantidad total 
pedida sea superior al 75% del stock; y ordenado por cantidad total pedida.

	select descripcion,precio,sum(cant) 
	from productos
 
	join pedidos on pedidos.fab=productos.idfab && pedidos.producto=productos.idproducto
	
where pedidos.cant>existencias * 0.75
	
group by idfab,idproducto
	
order by pedidos.cant;

	select descripcion,precio,sum(cant)

	FROM productos

	JOIN pedidos ON pedidos.fab=productos.idfab && pedidos.producto=productos.idproducto

	group by idfab,idproducto,descripcion,existencias
	
having sum(cant)>(075*existencias)

	order by sum(cant);

78. Mostrar el número de oficinas que existen en cada región. (NO ESTA CORREGIDO)

	select region,count(oficina) 
 AS 'Numero de oficinas'
	from oficinas	

	group by region;

79. Escribir una consulta SQL que indique el número de empleados que trabaja en cada oficina. (NO ESTA CORREGIDO)
	
	SELECT oficina,count(*) AS 'Numero de oficinas'

	FROM empleados
	
GROUP BY oficina

	having count(oficina)>=3;

80. Saber cuántas oficinas tienen algún empleado con ventas superiores a su cuota, no queremos saber cuales sino cuántas hay.

	Select count(*)

	from Oficinas

	where oficina in (SELECT oficina 
			  FROM empleados 
			  where ventas>cuota);

	
Select count(*) ----------------> ESTA MAL
	
from oficinas
	
join empleados on empleados.oficina = Oficinas.oficina
	
where Empleados.ventas > Empleados.cuota;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
||                                                                                                                                                                   ||
||    REGLA DE ORO:                                                                                                                                                  ||
||    EN EL SELECT O EN EL HAVING SOLO PUEDES USAR FUNCIONES DE AGREGADOS MAS LOS CAMPOS POR LOS QUE ESTAS AGRUPANDO                                                 ||
||                                                                                                                                                                   ||
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Subconsultas

81. Listar los nombres de los clientes que tienen asignado como responsable
a Alvaro Aluminio (suponiendo que no pueden haber empleados con el mismo nombre).

	HACIENDO TRAMPAS! 
	SELECT * FROM CLIENTES
	
WHERE resp = 102;
	
	SIN TRAMPAS!: 
	- con subconsultas: 
		SELECT * FROM CLIENTES
		
WHERE resp = (SELECT numemp 
		    	      FROM empleados 
		   	      WHERE nombre='Alvaro Aluminio');
	- consulta de agregados:
		SELECT * 
		from clientes
		
join empleados on clientes.resp=empleados.numemp
		
where empleados.nombre='Alvaro Aluminio';	

82. Mostrar información de los productos cuyas existencias estén por debajo de la existencia media de los productos.

	- HACIENDO TRAMPAS!
	  SELECT *
	  
FROM productos

	  WHERE existencias< 77.16;
	
	SIN TRAMPAS!:
	- con subconsulta:
		SELECT *
		
FROM productos
		
WHERE existencias< (SELECT AVG(existencias) 
				    FROM productos);

83. Listar los empleados (numemp, nombre, y no de oficina) que trabajan en oficinas “buenas” (las que tienen ventas superiores a su objetivo).

	- Con subconsulta:
		SELECT numemp,nombre, oficina
		
FROM empleados
		
WHERE oficina in (SELECT oficina
			    	
				  from oficinas
			    	
	              	          where ventas>objetivo);

	- Consulta de agregados:
		SELECT numemp,nombre, oficina

		FROM empleados
		
join oficinas on empleados.oficina=oficinas.oficina
		
where oficinas.ventas>oficinas.objetivo;

	- Los empleados cuyas oficnas no estan en la lista de las buenas:
		- Con subconsulta de tipo lista:
	 		SELECT numemp,nombre, oficina
			
FROM empleados
			
WHERE oficina not in (SELECT oficina
			    	
					      from oficinas
			    	
	              		              where ventas>objetivo);

	-Los empleados cuyas oficinas estan en la lista de buenas:

		- Con subconsulta de tipo lista:
			SELECT numemp,nombre, oficina
			
FROM empleados
			
WHERE oficina in (SELECT oficina
			    	
					      from oficinas
			    	
	              	        	      where ventas>objetivo);

		- Con subconsulta de tipo tabla:
			SELECT numemp,nombre, oficina
			
FROM empleados
			
WHERE exists (SELECT oficina
				
				      from oficinas
				
				      where Empleados.oficina = Oficinas.oficina and ventas>objetivo);
                

84. Listar los empleados que trabajan en una oficina de la región norte o de la región sur.
	-con subconsulta: 
		SELECT *
		FROM empleados
		
WHERE oficina in (SELECT oficina
				  
				  from oficinas
				  
		      	          where region='norte' || region='sur');
	
	-consulta de agregados:
		SELECT * 
		
from empleados
		
join oficina on empleados.oficina = oficinas.oficina
		
where oficinas.region = 'norte' or oficinas.region='sur';

85. Listar los empleados (numemp, nombre y oficina) que no trabajan en oficinas dirigidas por el empleado 108.

	-con subconsulta de tipo lista:
		SELECT numemp,nombre,Empleados.oficina
		
from empleados

		where oficina in (Select oficinas.oficina 
				  from oficinas 
				  where dir!=108);

		SELECT numemp,nombre,Empleados.oficina
		
from empleados
		
where oficina NOT in (Select oficinas.oficina 
				      from oficinas 
				      where dir=108);
	-con subconsulta de tipo tabla:
	
		SELECT numemp,nombre, empleados.oficina
	 	
from empleados
		
where not exists (Select *
				  
				  from oficinas 
				  
				  where empleados.oficina = Oficinas.oficina and dir = 108); 

	-consulta de agregados: 
		select numemp,nombre,Empleados.oficina
		from empleados

		JOIN oficinas on empleados.oficina = oficinas.oficina

		where dir != 108;

		
86. Escribir una consulta que muestre los empleados cuyo nombre coincide con el de algún cliente. Hacer dos versiones: con subconsulta de tipo lista y de tipo tabla.

	- con subconsulta de tipo lista:
	   select *

	   from empleados
	   
where nombre = any (select clientes.nombre 
			       from clientes);

	- con subconsulta de tipo tabla:
	   

87. Escribir una consulta que muestre los empleados cuyo primer nombre coincide con el primer nombre de algún cliente.

	- con subconsulta:
	  select *

	  from empleados
	  
where left(nombre,LOCATE(' ',nombre)) in 
(select left(clientes.nombre,LOCATE(' ',clientes.nombre))
														    from clientes);

88. Mostrar los empleados que no son directores de ninguna oficina.

	- con subconsulta de tipo lista:
	 	 select *

	 	 from empleados
	 	 
where numemp not in (SELECT dir 
			 	      from oficinas 
			  	     where dir is not null);

	-Con subconsulta de tipo tabla:
	 	select *
		
from empleados
		
where not exists (SELECT dir 
				
				  from oficinas 
				
				  where dir is not null AND oficinas.dir = empleados.numemp);

	-consulta de agregados:
	 	 SELECT *
	 	 
from empleados
	  	
join Oficinas on Empleados.oficina = Oficinas.oficina
	 	 
where numemp !=dir && dir is not null;

89. Listar los productos (idfab, idproducto y descripción) para los cuales no existe ningún pedido con importe igual o superior a 2.500 euros.

	-con subconsulta:
	 SELECT idfab,idproducto,descripcion

	 from productos
	 
where not exists (SELECT *
		
		           from pedidos 
		
	                   where Pedidos.fab=Productos.idfab  AND Pedidos.producto=Productos.idProducto AND importe >= 2500);

90. Listar los clientes asignados a Ana Bustamante que no han hecho un pedido superior a 300 euros.

	-Con subconsulta de tipo lista:
	 	SELECT *
		
from clientes
		
where resp = (SELECT empleados.numemp 
			  
			      from empleados 	
			  
			      where empleados.nombre = 'Ana Bustamante')
	 
		     AND numclie not in (SELECT pedidos.clie 
					     
					 from pedidos
					     
					 where importe>300 );

	-Con subconsulta de tipo tabla:
		SELECT *
	
		from clientes
	
		where exists(SELECT *
				  
			     from empleados 	
				 
			     where empleados.numemp = clientes.resp and empleados.nombre = 'Ana Bustamante')
		 
		     AND not exists(SELECT *
							 
				    from pedidos
							 
				    where pedidos.clie = clientes.numclie and importe>300 );

91. Listar las oficinas en donde al menos haya un empleado cuyas ventas representen más del 55% del objetivo de su oficina.



92. Listar las oficinas donde todos los empleados tienen ventas que superan al 50% del objetivo de la oficina.



93. Listar las oficinas que tengan un objetivo mayor que la suma de las cuotas de sus vendedores.

	- Con subconsulta de tipo tabla:
		SELECT *

		FROM oficinas
		
WHERE objetivo > (SELECT sum(cuota) 
				  FROM empleados 
				  WHERE oficinas.oficina = empleados.oficina);
